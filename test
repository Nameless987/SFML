#include <SFML/Graphics.hpp>
#include <iostream>
#include <vector>
#include <math.h>
#include <cstdlib>
#include<windows.h>

using namespace sf;
using namespace std;

#define PI 3.14159265

const char* nameProject = "Project_2";

Font font;
Text text;
bool fullscreen = true;
RenderWindow window(VideoMode(1920, 1080), nameProject, Style::Fullscreen);
Event event;
Mouse mouse;
Clock cl;

struct point{
    float x = window.getSize().x/2;
    float y = window.getSize().y/2;
    float vx;
    float vy;
    float ax;
    float ay;
    CircleShape body;
};

vector<point> player;
point newPlayer;

void draw(){
    window.draw(text);
}

float dist(float a, float b, float c, float d){
    return sqrt(pow((c-a), 2) + pow((d-b), 2));
}

void line(float a, float b, float c, float d, float e){
    ConvexShape convex;
    convex.setPointCount(4);
    if(c-a == 0){
        convex.setPoint(0, Vector2f(a-e/2, b));
        convex.setPoint(1, Vector2f(a+e/2, b));
        convex.setPoint(2, Vector2f(c+e/2, d));
        convex.setPoint(3, Vector2f(c-e/2, d));
    }
    else{
        float alpha = atan((d-b)/(c-a));
        convex.setPoint(0, Vector2f(a-(e/2)*sin(alpha), b+(e/2)*cos(alpha)));
        convex.setPoint(1, Vector2f(a+(e/2)*sin(alpha), b-(e/2)*cos(alpha)));
        convex.setPoint(2, Vector2f(c+(e/2)*sin(alpha), d-(e/2)*cos(alpha)));
        convex.setPoint(3, Vector2f(c-(e/2)*sin(alpha), d+(e/2)*cos(alpha)));
    }
    
    window.draw(convex);
}

int main(){
    srand(time(NULL));
    
    if (!font.loadFromFile("fonts/arial.ttf")){
        return 0;
    }

    clock_t beginTime;
    beginTime = clock();
    int count = 0;

    text.setFont(font);
    text.setCharacterSize(50);
    text.setFillColor(Color::White);

    for(int i=0; i<1000; i++){
        player.push_back(newPlayer);
    }

    for(int i=0; i<int(player.size()); i++){
        player[i].vx = rand()%200-100;
        player[i].vy = rand()%200-100;
        player[i].body.setFillColor(Color::Red);
        player[i].body.setRadius((float)(rand()%15+5));
    }
    
    while(window.isOpen()){
        while(window.pollEvent(event)){
            if((event.type == Event::KeyPressed) && (event.key.code == Keyboard::Enter) && (!fullscreen)) {
				fullscreen = true;
				window.create(VideoMode(1920, 1080), nameProject, (fullscreen ? Style::Fullscreen : Style::Resize|Style::Close));
			}
            else if((event.type == Event::KeyPressed) && (event.key.code == Keyboard::Escape) && (fullscreen)) {
				fullscreen = false;
				window.create(VideoMode(1920, 1080), nameProject, (fullscreen ? Style::Fullscreen : Style::Resize|Style::Close));
			}
            //if(event.type == Event::MouseButtonPressed){
            //    player.push_back(newPlayer);
            //    player[player.size()-1].vx = rand()%200-100;
            //    player[player.size()-1].vy = rand()%200-100;
            //    player[player.size()-1].body.setFillColor(Color::Red);
            //    player[player.size()-1].body.setRadius((float)(rand()%15+5));
            //}
            if(event.type == Event::Closed){
                window.close();
            }
        }
        window.clear();

        if(fullscreen){
            float time = cl.getElapsedTime().asSeconds();
            cl.restart();
            for(int i=0; i<int(player.size()); i++){
                player[i].vx += player[i].ax*time;
                player[i].vy += player[i].ay*time;
                player[i].x += player[i].vx*time;
                player[i].y += player[i].vy*time;

                if(player[i].x < 0){
                    player[i].x += 2*(-player[i].x);
                    player[i].vx *= -1;
                }
                if(player[i].x > window.getSize().x-(2*player[i].body.getRadius())){
                    player[i].x += 2*(window.getSize().x-(2*player[i].body.getRadius())-player[i].x);
                    player[i].vx *= -1;
                }
                if(player[i].y < 0){
                    player[i].y += 2*(-player[i].y);
                    player[i].vy *= -1;
                }
                if(player[i].y > window.getSize().y-(2*player[i].body.getRadius())){
                    player[i].y += 2*(window.getSize().y-(2*player[i].body.getRadius())-player[i].y);
                    player[i].vy *= -1;
                }
                
                count = 0;
                for(int j=0; j<int(player.size()); j++){
                    if(i!=j && (dist(player[i].x+player[i].body.getRadius(), player[i].y+player[i].body.getRadius(), player[j].x+player[j].body.getRadius(), player[j].y+player[j].body.getRadius())<(player[i].body.getRadius()+player[j].body.getRadius()))){
                        player[i].body.setFillColor(Color::Blue);
                        player[j].body.setFillColor(Color::Blue);
                        break;
                    }
                    else if(i!=j){
                        count += 1;
                    }
                }
                if(count == player.size()-1){
                    player[i].body.setFillColor(Color::Red);
                }

                player[i].body.setPosition(int(player[i].x), int(player[i].y));
                window.draw(player[i].body);
            }
            Sleep(1);
        }

        //text.setString(to_string(lines[0].x));
        //draw();
        window.display();
    }

    return 0;
}

//Access each vertex directly with something like circles [i]. position = sf vector2f(X,y)
//Though I'm not sure what you're actually trying to do. There might be even better solutions
//You should profile the code to see what's causing the problems, instead of thinking it's just the rendering

//Pass in the texture when you draw: window.draw(vertices, &texture);